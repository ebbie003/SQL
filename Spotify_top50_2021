# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

# Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

--Who are the Top 10 artists are by popularity?
SELECT track_name
, artist_name
, popularity 
FROM Spotifydata 
ORDER BY popularity DESC 
LIMIT 10;

--Determined the avg popularity, danceability, and energy by artist and track. 
SELECT artist_name
, track_name
, AVG(popularity) AS avg_popularity
, AVG(danceability) AS avg_danceability
, AVG(energy) AS avg_energy
FROM Spotifydata 
GROUP BY artist_name, track_name
;

--Which artists have the highest average danceability for their tracks?
SELECT artist_name
, AVG(danceability) AS avg_danceability
FROM Spotifydata 
GROUP BY artist_name
ORDER BY danceability DESC 
LIMIT 10;

--Which tracks have the highest energy levels?
SELECT track_name, artist_name, energy
FROM Spotifydata
GROUP BY track_name
ORDER BY energy DESC
LIMIT 10;


--What is the average loudness by key?
SELECT song_key, AVG(loudness) AS avg_loudness
FROM Spotifydata
GROUP BY song_key
ORDER BY avg_loudness DESC
LIMIT 10;


